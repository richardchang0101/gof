抽象工厂的结构
AbstractFactory(抽象工厂): 他生命了一组用于创建一族产品的方法，每一个方法对应一种产品。
ConcreteFactory(具体工厂): 它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。
AbstractProduct(抽象产品): 他为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。
ConcreteProduct(具体产品): 它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。

抽象工厂模式是工厂模式的进一步延伸，
优点：
    1. 抽象工厂模式隔离了具体类的生成，是的客户端并不需要知道什么被创建。由于这种隔离，更换一个具体的工厂就相对容易，所有的具体工厂都实现抽象工厂中定义的那些公共的接口
    因此只需要变更具体工厂实例就可以在某种程度上改变整个软件系统的行为。
    2. 当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只是使用同一个产品族中的对象。
    3. 增加新的产品族很方便，无需修改已有的系统，符合开闭原则。
缺点：
    增加新的产品等级结构麻烦，需要对原有的系统进行较大的修改，甚至需要修改抽象层代码，者显然会带来较大的不便，违背开闭原则。