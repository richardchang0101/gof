桥接模式
    将抽象的部分与他的实现部分解耦，使得两者都能独立的变化
实现：
    抽象类Abstraction：它是用于定义抽象类的接口，通常是抽象类而不是接口，器中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，他与Implementor之间具有关联关系，既可以包含抽象的业务方法，也可以包含具体的业务方法
    扩充抽象类RefinedAbstraction：他扩充由Abstraction定义的接口，通常情况下他不再是抽象类而是具体类，实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法
    实现类接口Implementor：它是定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同。一般而言,implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多的更复杂的操作。
    Implementor接口对这些基本操作进行了声明，而具体实现交给了其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。
    具体实现类ConcreteImplementor：具体实现了Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行是ConbcreteImplementor对象将替换其父类对象，提供给抽象类具体业务操作方法。
优点：
    分离抽象接口和实现部分。桥接模式使用对象间的关联关系解耦了抽象和实现之间固有绑定关系，使得抽象和实现可以沿着各自维度变化。
    在很多情况下，桥接模式可以取代多层继承方案，多层继承违背了单一职责原则，复用性较差，并且类的个数多，桥接模式是比多层继承方案更好的解决方法。
    桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度都不需要修改原有系统，符合开闭原则
缺点：
    桥接模式的使用会增加系统理解难度与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象出进行设计与编程
    桥接模式要求争取也得识别出系统中的亮哥独立变化的维度，因此其使用范围具有局限性，如何正确识别两个独立维度也需要一定经验。
