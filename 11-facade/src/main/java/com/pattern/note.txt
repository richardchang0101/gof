外观模式：
    为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
组成
    外观角色Facade：在客户端可以调用他的方法，在外观角色中可以知道相关的子系统的功能和责任；在正常情况下，他讲所有从客户端发来的请求委派到相应的子系统，传递给相应的系统对象处理
    子系统角色SuSystem:在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现了子系统的功能；每一个子系统都可以被客户端直接调用，
    或者被外观角色调用，他处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已
子系统是一个广义的概念，可以是类、功能模块、系统的组成部分或者完整的系统，子系统类通常是一些衣物类，实现了一些具体的、独立的业务功能

优点：
    对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使子系统使用起来更加容易。通过引入外观模式，客户端代码将变得很简单，与之关联对象会少很多
    它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用他的客户端，只需要调整外观类即可
    一个子系统的修改对其他系统没有任何影响，而且子系统内部变化也不会影响到外观对象
缺点：
    不能很好限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性
    如果设计不当，增加新的子系统可能需要修改外观类源代码，违背了开闭原则