享元模式
    运用共享技术有效地支持大量细力度对象的复用
结构：
    抽象享元类Flyweight:抽象享元类通常是一个接口或者抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据，同时也可以通过这些方法来设置外部数据
    具体享元类ConcreteFlyweight:具体享元类实现了抽象享元类，其实例称为享元对象；在具体享元类中为内部状态提供了存储空间，通常可以结合单利模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象
    非共享具体享元类UnsharedConcreteFlyweight：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可以设计为非共享的具体享元类；当需要一个非共享的具体享元类的对象时可以直接通过实例化创建
    享元工厂类FlyweightFactory：用于创建并管理享元对象，他针对抽象享元类编程。将各种类型的具体享元对象存储在一个享元池中，享元池一般设计为一个存储键值对的集合，可以结合工厂模式进行设计；当用户请求一个具体享元对象时，享元工厂提供一个存储在享元池中创建的实例或者创建一个新的实例，返回新创建的实例并将其存储在享元池中。
String的字符串常量池就是用的享元模式
优点：
    享元模式可以减少内存中对象的数量，使得相同或者相似对象在内存中只保存一份，从而可以节约系统资源，提高系统性能
    享元模式的外部相对独立，而不会影响其内部状态，从而是享元对象可以在不同的环境中被共享
缺点：
    享元模式使得系统变得复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化
    为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态使得运行时间变长
