职责链模式
    避免将一个请求的发送者与接受者耦合在一起，让多个对象都有机会处理请求。将接受请求的对象连接成一条链，并且沿着这条链传递请求，直到有一个对象能够处理它为止
结构：
    抽象处理者Handler：它定义了一个请求处理的接口，一般设计为抽象类，由于不同的具体处理这处理请求的方式不同，因此在其中定义了抽象请求的处理方法。每一个处理这的下家还是一个处理者，故在抽象处理者中定义了一个抽象处理者类型的对象作为下家的引用，通过该引用处理这可以连成一条链
    具体处理者ConcreteHandler：他是抽象处理者的子类，可以处理用户请求，在具体处理这类中实现了抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者；在具体处理者中可以访问链中的下一个独享，以便请求的转发
优点：
    1、职责链模式使得一个对象无须直到是其他哪一个独享处理其请求，对象仅需知道该请求会被处理即可，接受者和发送者都没有对象的明确信息，并且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统耦合度
    2、请求处理对象仅需要维持一个指向其后继者的引用，而不需要位置它对所有的候选处理者的引用，可以简化对象之间的相互连接
    3、在给对象分派职责时，职责链可以带来更多灵活性，可以通过在运行时对该链进行动态增加或者修改来增加或者改变处理一个请求的职责
    4、在系统中增加一个新的具体请求处理者时无需修改原有系统的代码，只需要在客户端重新建链即可，从这里看是符合开闭原则的。
缺点：
    1、由于一个请求没有明确的接受者，那么就不能保证一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因为职责链没有被正确配置而得不到处理
    2、对于比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响，而且在进行代码调试不方便
    3、如果建链不当，可能会造成循环调用，将导致系统陷入死循环。