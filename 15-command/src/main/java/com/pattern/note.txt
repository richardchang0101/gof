命令模式：
    将一个请求封装为一个对象，从而可用不同的请求客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作
组成：
    抽象命令类Command：抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute等方法，通过这些方法可以调用请求接受者的相关操作
    具体命令类ConcreteCommand：具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，他对应具体的接受者对象，将接受者对象的动作绑定其中。具体命令类在实现excute方法时将调用接受者对象的相关操作
    调用者Invoker：调用者即请求发送者，他通过命令对象来执行请求，一个调用者并不需要再设计时确定其接受者，因此他只与抽象命令类之间存在关联关系。在程序运行时可以将一个具体命令对象注入其中，再调用具体命令对象的execute方法，从而实现简洁调用请求接受者的相关操作
    接受者Receiver:接收者执行与请求相关的操作，具体实现对请求的业务处理
优点：
    降低系统耦合度。由于请求者与接受者之间不存在直接引用，因此请求者与接受者之间实现完全解耦，相同的请求者可以对应不同的接受者，同样相同接受者也可以供不同请求者使用，两者具有良好的独立性
    新的命令可以很容易得加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无需修改原有代码，满足开闭原则要求
    可以比较容易得设计一个命令队列或者宏命令
    为请求的撤销和恢复操作提供了一个设计和实现方案
缺点：
    使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接受这的调用操作都需要设计一个具体命令类，所有在某些系统中可能需要提供大量具体类的命令类，这将影响命令模式的使用。