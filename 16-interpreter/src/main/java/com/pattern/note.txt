解释器模式：
    给定一个语言，定义他的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子
结构：
    抽象表达式AbstractExpression：在抽象表达式中声明了抽象的解释操作，它是所有终结符表达式和非终结符表达式的公共父类。
    终结符表达式TerminalExpression：终结符表达式是抽象表达式的子类，它实现了与文法中的终结符相关联的解释操作，在句子中的每一个终结符都是该类的一个实例。通常在一个解释器模式中只有少数几个终结符表达式类，他们的实例可以通过非终结符表达式组成较为复杂的句子。
    非终结符表达式NotterminalExpression：非终结符表达式也是抽象表达式的子类。它实现了文法中非终结符的解释操作，由于在非终结符表达式中可以包含终结符表达式，也可以继续包含非终结符表达式，因此其解释操作一般通过地柜的方式完成
    环境类Context：环境类又称为上下文类，它用于存储解释器之外的一些全局信息，通常他临时存储需要解释的语句
优点：
    抑郁改变和扩展文法，
    每一条文法规则都可以表示为一个类，因此可以方便的实现一个简单的语言
    实现文法较为容易，在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂，还可以通过一些工具自动生成节点类代码
    增加新的解释表达式较为方便。如果用户要增加新的解释表达式只需要对应增加一个新的终结符表达式或者非终结符表达式类，原有表达式类代码无需修改，符合开闭原则
缺点：
    对于复杂文法难以维护。在解释器模式中每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护，此时可以考虑使用语法分析程序等方式来取代解释器
    执行效率低。由于在解释器模式中使用了大量循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码调试较为麻烦
