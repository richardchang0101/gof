迭代器模式
    提供一个方法顺序访问一个聚合对象中的各个元素，而又不用暴露该对象内部表示
结构
    抽象迭代器Iterator：它定义了访问和遍历元素的接口，声明了用于遍历数据元素的方法，例如用于获取第一个元素first的方法、用于访问下一个元素next方法、用于判断是否还有下一个元素的hasNext方法、用于获取当前元素的currentItern方法等
        在具体迭代器中还将实现这些方法
    具体迭代器ConcreteIterator：实现了抽象迭代器接口，完成对聚合对象的遍历，同时在具体迭代器中通过游标来记录聚合对象中所处的当前位置，再具体实现时游标通常是一个具体以位置非负整数
    抽象聚合类Aggregate：它用于存储和管理元素对象，声明一个createIterator方法用于创建迭代器对象，充当抽象迭代器工厂角色
    具体聚合类ConcreteAggregate：他是抽象聚合类的子类，实现了在抽象聚合类中声明的createIterator方法，该方法返回一个与该具体聚合类对应的具体迭代器ConcreteIterator实例
优点：
    迭代器模式支持不同方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同迭代器来替换原有迭代器即可改变遍历算法，也可以自己定义迭代器的子类支持新的遍历方式
    迭代器模式简化聚合类。由于引入迭代器，聚合对象不需要提供数据遍历等方法，这样可以简化聚合类的设计
    在迭代器模式中由于引入了抽象层，增加了新的聚合类和迭代器类都很方便，无需修改源代码，满足开闭原则
缺点：
    由于迭代器模式将存储数据和遍历数据的职责分离，在增加新的聚合类是需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加系统复杂性
    抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展。自定义迭代器是创建一个需要全面考虑的抽象迭代器并不是很容易的事情
