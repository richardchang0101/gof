状态模式
    允许一个对象在其内部状态改变时改变它的行为。独享看起来似乎修改了它的类
组成
    环境类Context:环境类又称为上下文类，他是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态。在具体实现时他是一个state子类对象
    抽象状态类State:它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现了这些方法，由于不同状态下对象行为可能不同，因此在不同子类中方法实现可能不同，相同的方法可以卸载抽象状态类中
    具体状态类ConcreteState：他是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相同的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类的行为有所不同
优点：
    状态模式封装了状态的转换规则，在状态模式中可以将状态的转换代码封装在环境类或者具体状态类中，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中
    状态模式将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同行为
    状态模式允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大条件语句块，状态模式可以避免使用庞大条件语句将业务方法和状态转换代码交织在一起
    状态模式可以让多个环境对象共享一个状态对象，从而减少系统中对象个数
缺点：
    状态模式会增加系统中类和对象的个数，导致系统运行开销增大。
    状态模式的结构与实现都较为复杂，如果使用不得当将导致程序结构和代码的混乱，增加系统状态的难度。
    状态模式对开闭原则的支持并不太好，增加新的状态类需要修改那些负责状态转换的源代码，否则无法转换到新增状态；而且修改某个状态类的行为也需要修改对应类的源代码