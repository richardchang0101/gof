模板方法模式：
    定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义到该算法的特定步骤
组成
    抽象类AbstractClass：在抽象类定义了一系列基本操作，这写基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以从定义或者实现这些步骤。同时在抽象类中实现了一个模板方法，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类子类中实现的基本方法，还可以调用其他对象中的方法
    具体子类ConcreteClass：他是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作
优点：
    在父类中形式化的定义一个算法，而由他的子类来实现细节处理，在子类中实现详细的处理算法时并不会改变算法的步骤执行顺序、
    模板方法模式是一种代码复用技术，在类库设计中尤其重要，他提取了类库中的公共行为，将公共行为放在父类中，而通过其子类实现不同的行为，他鼓励用户恰当的使用继承来实现代码复用
    模板方法模式可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行
    在模板方法木事中可以通过子类覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则
缺点：
    在模板模式中需要配位每一个基本方法的不同实现类提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时可以结合桥接模式进行设计
